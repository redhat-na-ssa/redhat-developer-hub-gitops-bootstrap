apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: vault
resources:
  - ../../bases/vault/

patches:
  - target:
      kind: Service
      name: vault-internal
    patch: |
      - op: remove
        path: /metadata/annotations/service.beta.openshift.io~1serving-cert-secret-name  

helmCharts:
  - name: vault
    releaseName: vault
    namespace: vault
    repo: https://helm.releases.hashicorp.com
    version: 0.25.0
    valuesInline:
      installCRDs: true
      global:
        openshift: true
        tlsDisable: false

      ui:
        enabled: true

      injector:
        enabled: true
        image:
          repository: "registry.connect.redhat.com/hashicorp/vault-k8s"
          tag: "1.2.0-ubi"

        agentImage:
          repository: "registry.connect.redhat.com/hashicorp/vault"
          tag: "1.12.3-ubi"    

      csi:
        image:
          repository: "docker.io/hashicorp/vault-csi-provider"
          tag: "1.2.1"
          pullPolicy: IfNotPresent     

      server:
        image:
          tag: "1.12.3-ubi"
          repository: registry.connect.redhat.com/hashicorp/vault

        extraEnvironmentVars:
          VAULT_CACERT: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt

        route:
          enabled: true
          host: ""

        extraVolumes:
          - type: secret
            name: vault-server-tls # Matches the ${SECRET_NAME} from above

        volumes:    
          - name: plugins
            emptyDir: {}
          - name: vault-root-token
            secret:
              secretName: vault-init
              optional: true  

        volumeMounts:
          - mountPath: /usr/local/libexec/vault
            name: plugins
            readOnly: false 

        standalone:
          enabled: true
          config: |
            ui = true
            listener "tcp" {
              address = "[::]:8200"
              cluster_address = "[::]:8201"
              tls_cert_file = "/vault/userconfig/vault-server-tls/tls.crt"
              tls_key_file  = "/vault/userconfig/vault-server-tls/tls.key"
              tls_client_ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
            }

            storage "file" {
              path = "/vault/data"
            }

            plugin_directory = "/usr/local/libexec/vault"

        service: 
          annotations:
            service.beta.openshift.io/serving-cert-secret-name: vault-server-tls

        extraInitContainers:
          # # This example installs a plugin pulled from github into the /usr/local/libexec/vault/oauthapp folder,
          # # which is defined in the volumes value.

          - name: utility-downloader
            image: registry.access.redhat.com/ubi8/ubi:8.5
            command: 
            - /bin/bash
            - -c
            - | 
                cd /usr/local/libexec/vault
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                chmod +x jq
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault

          - name: quay-module-downloader
            image: registry.access.redhat.com/ubi8/ubi:8.5
            command: 
            - /bin/bash
            - -c
            - | 
                export PLUGIN_VERSION=v0.0.1-rc4
                cd /usr/local/libexec/vault
                curl -L -o vault-plugin-secrets-quay-linux-amd64 https://github.com/redhat-cop/vault-plugin-secrets-quay/releases/download/${PLUGIN_VERSION}/vault-plugin-secrets-quay-linux-amd64 
                chmod +x vault-plugin-secrets-quay-linux-amd64
                curl -L -o quay_SHA256SUMS https://github.com/redhat-cop/vault-plugin-secrets-quay/releases/download/${PLUGIN_VERSION}/checksums.txt
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault            
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              privileged: false
              runAsNonRoot: true
              ## For OCP 4.10 and earlier comment out the next 2 lines
              seccompProfile:
                type: RuntimeDefault

          - name: github-module-downloader
            image: registry.access.redhat.com/ubi8/ubi:8.5
            command: 
            - /bin/bash
            - -c
            - | 
                export PLUGIN_VERSION=v2.0.0
                cd /usr/local/libexec/vault
                curl -L -o vault-plugin-secrets-github-linux-amd64 https://github.com/martinbaillie/vault-plugin-secrets-github/releases/download/${PLUGIN_VERSION}/vault-plugin-secrets-github-linux-amd64 
                chmod +x vault-plugin-secrets-github-linux-amd64
                curl -L -o SHA256SUMS https://github.com/martinbaillie/vault-plugin-secrets-github/releases/download/${PLUGIN_VERSION}/SHA256SUMS
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault
            securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            runAsNonRoot: true
            ## For OCP 4.10 and earlier comment out the next 2 lines
            seccompProfile:
              type: RuntimeDefault

        extraContainers:
          # you should not do this in production
          - name: auto-initializer
            image: registry.connect.redhat.com/hashicorp/vault:1.12.3-ubi
            env: 
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace      
            - name: VAULT_SKIP_VERIFY
              value: "true"      
            - name: VAULT_ADDR
              value: https://localhost:8200
            - name: VAULT_CACERT
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt  
            command: 
            - /bin/bash
            - -c
            - | 
                while true; do
                  sleep 5
                  if [[ $(vault status | grep "Initialized" | grep "false") ]]; then
                    export INIT_RESPONSE=$(vault operator init -format=json -key-shares 1 -key-threshold 1)
                    echo "$INIT_RESPONSE"
                    export UNSEAL_KEY=$(echo "$INIT_RESPONSE" | /usr/local/libexec/vault/jq -r .unseal_keys_b64[0])
                    export ROOT_TOKEN=$(echo "$INIT_RESPONSE" | /usr/local/libexec/vault/jq -r .root_token)
                    echo "$UNSEAL_KEY"
                    echo "$ROOT_TOKEN"
                    /usr/local/libexec/vault/kubectl delete secret vault-init -n ${NAMESPACE}
                    /usr/local/libexec/vault/kubectl create secret generic vault-init -n ${NAMESPACE} --from-literal=unseal_key=${UNSEAL_KEY} --from-literal=root_token=${ROOT_TOKEN} 
                  else
                    echo vault already initialized
                    sleep 5
                  fi    
                done
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault          
          # you should not do this in production      
          - name: auto-unsealer
            image: registry.connect.redhat.com/hashicorp/vault:1.12.3-ubi
            env: 
            - name: VAULT_SKIP_VERIFY
              value: "true"        
            - name: VAULT_ADDR
              value: https://localhost:8200
            - name: VAULT_CACERT
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt  
            command: 
            - /bin/bash
            - -c
            - | 
                while true; do
                  sleep 5
                  if [[ $(vault status | grep "Initialized" | grep "true") ]]; then
                    if [[ $(vault status | grep "Sealed" | grep "true") ]]; then
                      if [[ -f /vault-root-token/unseal_key ]]; then
                        #vault operator unseal -reset $(cat /vault-root-token/unseal_key)
                        vault operator unseal $(cat /vault-root-token/unseal_key)
                      else
                        echo unseal key not initialized yet  
                      fi
                    else  
                      echo vault already unsealed
                    fi
                  else  
                    echo Vault not initialized yet
                  fi     
                done
            volumeMounts:
              - name: vault-root-token
                mountPath: /vault-root-token  

          # - name: vault-admin-initializer #TODO: move this to a Ansible playbook!
          #   image: registry.connect.redhat.com/hashicorp/vault:1.12.3-ubi
          #   env: 
          #   - name: VAULT_ADDR
          #     value: https://vault.vault.svc:8200
          #   - name: VAULT_CACERT
          #     value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt  
          #   command: 
          #   - /bin/bash
          #   - -c
          #   - | 
          #     while true; do
          #       sleep 5
          #       if [[ -f /vault-root-token/root_token ]]; then
          #         export VAULT_TOKEN=$(cat /vault-root-token/root_token)
          #         if [[ $(vault status | grep "Sealed" | grep "false") ]]; then
          #           if [[ ! $(vault policy list | grep vault-admin) ]]; then
          #             #doc ref: https://developer.hashicorp.com/vault/docs/auth/kubernetes
          #             vault auth enable kubernetes
          #             vault write auth/kubernetes/config kubernetes_host=https://kubernetes.default.svc:443 
          #             vault write auth/kubernetes/role/policy-admin bound_service_account_names=default bound_service_account_namespaces=vault-admin policies=vault-admin ttl=1h
          #             cat << EOF | vault policy write vault-admin -
          #               path "/*" {
          #                 capabilities = ["create", "read", "update", "delete", "list","sudo"]
          #               }
          #     EOF
          #           else 
          #             echo vault admin already configured, just updating kubernetes config
          #             #ref: https://kubernetes.io/docs/tasks/run-application/access-api-from-pod/
          #             vault write auth/kubernetes/config token_reviewer_jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token kubernetes_host=https://kubernetes.default.svc:443 kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt 
          #             echo creating accessor configmap
          #             accessor=$(vault auth list -detailed | grep kubernetes | awk '{print $3}')
          #             if /usr/local/libexec/vault/kubectl get configmap kubeauth-accessor -n vault; then
          #               /usr/local/libexec/vault/kubectl patch configmap kubeauth-accessor -n vault -p '{"data":{"accessor": "'"${accessor}"'"}}'
          #             else  
          #               /usr/local/libexec/vault/kubectl create configmap kubeauth-accessor -n vault --from-literal=accessor=${accessor}
          #             fi  
          #             sleep 5
          #           fi      
          #         else
          #           echo vault still sealed
          #         fi    
          #       else 
          #         echo root token not initialized yet    
          #       fi    
          #     done      
          #   volumeMounts:
          #     - name: vault-root-token
          #       mountPath: /vault-root-token
          #     - name: plugins
          #       mountPath: /usr/local/libexec/vault

          - name: github-module-loader
            image: registry.connect.redhat.com/hashicorp/vault:1.12.3-ubi
            env:
            # - name: VAULT_TLS_SERVER_NAME
            #   valueFrom:
            #     secretKeyRef:
            #       name: vault-env-vars
            #       key: VAULT_TLS_SERVER_NAME
            # - name: VAULT_CACERT
            #   valueFrom:
            #     secretKeyRef:
            #       name: vault-env-vars
            #       key: VAULT_CACERT
            - name: VAULT_SKIP_VERIFY
              value: "true"        
            - name: VAULT_ADDR
              value: https://localhost:8200
            - name: VAULT_CACERT
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            command: 
            - /bin/bash
            - -c
            - | 
                while true; do
                  sleep 5
                  if [[ -f /vault-root-token/root_token ]]; then
                    export VAULT_TOKEN=$(cat /vault-root-token/root_token)
                    if [[ $(vault status | grep "Sealed" | grep "false") ]]; then
                      if [[ $(vault plugin list secret | grep vault-plugin-secrets-github) ]]; then
                        echo vault-plugin-secrets-github plugin already installed
                        sleep 5
                      else
                        echo SHA256SUM $(grep vault-plugin-secrets-github-linux-amd64 /usr/local/libexec/vault/SHA256SUMS | cut -d' ' -f1)
                        vault plugin register -sha256=$(grep vault-plugin-secrets-github-linux-amd64 /usr/local/libexec/vault/SHA256SUMS | cut -d' ' -f1) -command=vault-plugin-secrets-github-linux-amd64 -args="--tls-skip-verify=true" secret vault-plugin-secrets-github
                      fi
                    else
                      echo vault still sealed
                    fi    
                  else 
                    echo root token not initialized yet    
                  fi    
                done
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault
              - name: vault-root-token
                mountPath: /vault-root-token
              # - mountPath: "/etc/vault-tls/vault-cert"
              #   name: "vault-cert"

          - name: quay-module-loader
            image: registry.connect.redhat.com/hashicorp/vault:1.12.3-ubi
            env:
            # - name: VAULT_TLS_SERVER_NAME
            #   valueFrom:
            #     secretKeyRef:
            #       name: vault-env-vars
            #       key: VAULT_TLS_SERVER_NAME
            # - name: VAULT_CACERT
            #   valueFrom:
            #     secretKeyRef:
            #       name: vault-env-vars
            #       key: VAULT_CACERT
            - name: VAULT_SKIP_VERIFY
              value: "true"        
            - name: VAULT_ADDR
              value: https://localhost:8200
            - name: VAULT_CACERT
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt  
            command: 
            - /bin/bash
            - -c
            - | 
                while true; do
                  sleep 5
                  if [[ -f /vault-root-token/root_token ]]; then
                    export VAULT_TOKEN=$(cat /vault-root-token/root_token)
                    if [[ $(vault status | grep "Sealed" | grep "false") ]]; then
                      if [[ $(vault plugin list secret | grep vault-plugin-secrets-quay) ]]; then
                        echo vault-plugin-secrets-quay plugin already installed
                        sleep 5
                      else
                        echo quay_SHA256SUM $(grep -w vault-plugin-secrets-quay-linux-amd64 /usr/local/libexec/vault/quay_SHA256SUMS | cut -d' ' -f1)
                        vault plugin register -sha256=$(grep -w vault-plugin-secrets-quay-linux-amd64 /usr/local/libexec/vault/quay_SHA256SUMS | cut -d' ' -f1) -command=vault-plugin-secrets-quay-linux-amd64 -args="--tls-skip-verify=true" secret vault-plugin-secrets-quay
                      fi
                    else
                      echo vault still sealed
                    fi    
                  else 
                    echo root token not initialized yet    
                  fi    
                done
            volumeMounts:
              - name: plugins
                mountPath: /usr/local/libexec/vault
              - name: vault-root-token
                mountPath: /vault-root-token
              # - mountPath: "/etc/vault-tls/vault-cert"
              #   name: "vault-cert" 
